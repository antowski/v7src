// Реализация шагов BDD-фич/сценариев c помощью фреймворка https://github.com/artbear/1bdd

#Использовать asserts
#Использовать tempfiles
#Использовать logos
#Использовать 1commands
//#Использовать fs

Перем БДД; //контекст фреймворка 1bdd
Перем мМенеджерВремФайлов;
Перем мЛог;
Перем мФС;

// Метод выдает список шагов, реализованных в данном файле-шагов
Функция ПолучитьСписокШагов(КонтекстФреймворкаBDD) Экспорт
	БДД = КонтекстФреймворкаBDD;

	ВсеШаги = Новый Массив;

	ВсеШаги.Добавить("ЯСоздаюВременныйКаталогБинарниковИСохраняюЕгоВКонтекст");
	ВсеШаги.Добавить("ЯСоздаюДругойВременныйКаталогДляИсходниковИСохраняюЕгоВКонтекст");
	ВсеШаги.Добавить("ЯСохраняюВКонтекстИмяКаталогаРесурсов");
	ВсеШаги.Добавить("КаталогБинарниковПустой");
	ВсеШаги.Добавить("ЯВыполняюКомандуРаспаковкиБинарников");
	ВсеШаги.Добавить("КаталогИсходниковПустой");
	ВсеШаги.Добавить("ЯКопируюФайлИзКаталогаРесурсовВКаталогБинарников");
	ВсеШаги.Добавить("ВКаталогеИсходниковЕстьКаталог");
	ВсеШаги.Добавить("ВКаталогеИсходниковВПодкаталогеЕстьФайл");
	ВсеШаги.Добавить("ЯСоздаюВременныйКаталогБинарниковСИменемИСохраняюЕгоВКонтекст");
	ВсеШаги.Добавить("ЯСоздаюВременныйКаталогИсходниковСИменемИСохраняюЕгоВКонтекст");
	ВсеШаги.Добавить("ЯЧитаюТекстФайлаИзКаталогаИсходниковВКодировке");
	ВсеШаги.Добавить("ПрочитанныйТекстСодержитСтроку");
	ВсеШаги.Добавить("ЯКопируюСодержимоеКаталогаИзКаталогаРесурсовВКаталогБинарников");
	ВсеШаги.Добавить("ВКаталогеИсходниковНетДругихКаталоговКроме");
	ВсеШаги.Добавить("ВКаталогеИсходниковВПодкаталогеЕстьКаталог");

	Возврат ВсеШаги;
КонецФункции

// Реализация шагов

// Процедура выполняется перед запуском каждого сценария
Процедура ПередЗапускомСценария(Знач Узел) Экспорт
	мМенеджерВремФайлов = Новый МенеджерВременныхФайлов;
	мФС = ПолучитьОбъектФС();
КонецПроцедуры

// Процедура выполняется после завершения каждого сценария
Процедура ПослеЗапускаСценария(Знач Узел) Экспорт
	мМенеджерВремФайлов.Удалить();
КонецПроцедуры

Функция ПолучитьОбъектФС()
	Возврат ЗагрузитьСценарий("..\files-common\Модули\ФС.os");
КонецФункции // ПолучитьОбъектФС()

//Я создаю временный каталог бинарников и сохраняю его в контекст
Процедура ЯСоздаюВременныйКаталогБинарниковИСохраняюЕгоВКонтекст() Экспорт
	
	ВременныйКаталог = мМенеджерВремФайлов.СоздатьКаталог();
	БДД.СохранитьВКонтекст("bin", ВременныйКаталог);

КонецПроцедуры

//я создаю другой временный каталог для исходников и сохраняю его в контекст
Процедура ЯСоздаюДругойВременныйКаталогДляИсходниковИСохраняюЕгоВКонтекст() Экспорт
	ВременныйКаталог = мМенеджерВремФайлов.СоздатьКаталог();
	БДД.СохранитьВКонтекст("src", ВременныйКаталог);
КонецПроцедуры

//я сохраняю в контекст имя каталога ресурсов "features\resources"
Процедура ЯСохраняюВКонтекстИмяКаталогаРесурсов(Знач пИмяКаталога) Экспорт
    БДД.СохранитьВКонтекст("res", пИмяКаталога);	
КонецПроцедуры

//я выполняю команду распаковки файлов из этого каталога в другой временный каталог исходников
Процедура ЯВыполняюКомандуРаспаковкиБинарников() Экспорт
	ВыполнитьКоманду("v7src extract -bin """ + КаталогБинарников() + """ -src """ + КаталогИсходников() + """");	
КонецПроцедуры

//каталог исходников пустой
Процедура КаталогИсходниковПустой() Экспорт
	ПроверитьКаталогПустой(КаталогИсходников());
КонецПроцедуры

//каталог бинарников пустой
Процедура КаталогБинарниковПустой() Экспорт
	ПроверитьКаталогПустой(КаталогБинарников());
КонецПроцедуры

//в каталоге исходников есть каталог "sample_proc1_ert"
Процедура ВКаталогеИсходниковЕстьКаталог(Знач пИмяКаталога) Экспорт
    
	НайденныеФайлы = НайтиФайлы(КаталогИсходников(), ПолучитьМаскуВсеФайлы());
	ПолныйПутьККаталогу = ОбъединитьПути(КаталогИсходников(), пИмяКаталога);
	СообщениеПриОшибке = "Каталог <" + пИмяКаталога + "> не найден в каталоге исходников. Полный путь: " + ПолныйПутьККаталогу;	
    Ожидаем.Что(мФС.КаталогСуществует(ПолныйПутьККаталогу), СообщениеПриОшибке).ЭтоИстина();

КонецПроцедуры

//в каталоге исходников "sample_proc1_ert" есть файл "Модуль.1s"
Процедура ВКаталогеИсходниковВПодкаталогеЕстьФайл(Знач пПодкаталог, Знач пИмяФайла) Экспорт

	ПолноеИмяФайла = ОбъединитьПути(КаталогИсходников(), пПодкаталог, пИмяФайла);

    СообщениеПриОшибке = "Файл <" + пИмяФайла + "> не найден в подкаталоге <" + пПодкаталог + "> в каталоге исходников. Полный путь: " + ПолноеИмяФайла;	
	Ожидаем.Что(мФС.ФайлСуществует(ПолноеИмяФайла), СообщениеПриОшибке).ЭтоИстина();

КонецПроцедуры

//я копирую файл "sample.proc1.ert" из каталога ресурсов в каталог бинарников
Процедура ЯКопируюФайлИзКаталогаРесурсовВКаталогБинарников(Знач пИмяФайла) Экспорт
    КопироватьФайл(ОбъединитьПути(КаталогРесурсов(),пИмяФайла), ОбъединитьПути(КаталогБинарников(),пИмяФайла));
КонецПроцедуры
//я создаю временный каталог бинарников с именем "Кириллица с пробелами - бинарники" и сохраняю его в контекст
Процедура ЯСоздаюВременныйКаталогБинарниковСИменемИСохраняюЕгоВКонтекст(Знач пИмяКаталога) Экспорт
	ВременныйКаталог = мМенеджерВремФайлов.СоздатьКаталог(пИмяКаталога);
	БДД.СохранитьВКонтекст("bin", ВременныйКаталог);
КонецПроцедуры

//я создаю временный каталог исходников с именем "Кириллица с пробелами - исходники" и сохраняю его в контекст
Процедура ЯСоздаюВременныйКаталогИсходниковСИменемИСохраняюЕгоВКонтекст(Знач пИмяКаталога) Экспорт
	ВременныйКаталог = мМенеджерВремФайлов.СоздатьКаталог(пИмяКаталога);
	БДД.СохранитьВКонтекст("src", ВременныйКаталог);
КонецПроцедуры

//я читаю текст файла "sample.proc1.ert\МодульФормы.1s" их каталога исходников в кодировке "UTF-8"
Процедура ЯЧитаюТекстФайлаИзКаталогаИсходниковВКодировке(Знач ИмяФайла, Знач Кодировка) Экспорт
	
	ПолноеИмяФайла = ОбъединитьПути(КаталогИсходников(),ИмяФайла);

	Читатель = Новый ЧтениеТекста(ПолноеИмяФайла, Кодировка);
    БДД.СохранитьВКонтекст("ПрочитанныйТекст", Читатель.Прочитать());
	Читатель.Закрыть();

КонецПроцедуры

//прочитанный текст содержит строку "Процедура Сформировать()"
Процедура ПрочитанныйТекстСодержитСтроку(Знач СтрокаПоиска) Экспорт
	
	Ожидаем.Что(БДД.ПолучитьИзКонтекста("ПрочитанныйТекст")).Содержит(СтрокаПоиска);

КонецПроцедуры
//я копирую содержимое каталога "bin" из каталога ресурсов в каталог бинарников
Процедура ЯКопируюСодержимоеКаталогаИзКаталогаРесурсовВКаталогБинарников(Знач ИмяКаталога) Экспорт
	
	мФС.КопироватьСодержимоеКаталога(ОбъединитьПути(КаталогРесурсов(),ИмяКаталога), КаталогБинарников());

КонецПроцедуры
//в каталоге исходников нет других каталогов кроме "sample_1cv7_md,extforms"
Процедура ВКаталогеИсходниковНетДругихКаталоговКроме(Знач КаталогиСтрокой) Экспорт

	//КаталогиСтрокой = СтрЗаменить(КаталогиСтрокой, ",", Символы.CR + Символы.LF);
	КаталогиСтрокой = СтрЗаменить(КаталогиСтрокой, ",", Символы.LF);
	
	МассивИменКаталогов = Новый Массив;
	Для й = 1 По СтрЧислоСтрок(КаталогиСтрокой) Цикл
		ИмяКаталога = СтрПолучитьСтроку(КаталогиСтрокой, й);
		МассивИменКаталогов.Добавить(ИмяКаталога);
	КонецЦикла;

	ЕстьДругиеФайлы = Ложь;
	НайденныеФайлы = НайтиФайлы(КаталогИсходников(), ПолучитьМаскуВсеФайлы());
	Для каждого НайденныйФайл Из НайденныеФайлы Цикл
		Если НайденныйФайл.ЭтоКаталог() И МассивИменКаталогов.Найти(НайденныйФайл.Имя) = Неопределено Тогда
			ВызватьИсключение "В каталоге исходников обнаружен каталог <" + НайденныйФайл.Имя + ">.
			|Ожидается что в каталоге исходников будут только каталоги <" + КаталогиСтрокой + ">";
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры
//я вывожу в лог найденные файлы в каталоге исходников
Процедура ЯВывожуВЛогНайденныеФайлыВКаталогеИсходников() Экспорт

	мЛог.Информация("В каталоге исходников найдены следующие файлы:");

	НайденныеФайлы = НайтиФайлы(КаталогИсходников(), ПолучитьМаскуВсеФайлы());
	Для каждого НайденныйФайл Из НайденныеФайлы Цикл
		мЛог.Информация("" + НайденныйФайл.ПолноеИмя + "; это каталог: " + НайденныйФайл.ЭтоКаталог());		
	КонецЦикла;

КонецПроцедуры
//в каталоге исходников в подкаталоге "1Cv7_MD" есть каталог "Справочники"
Процедура ВКаталогеИсходниковВПодкаталогеЕстьКаталог(Знач Каталог, Знач ВложенныйКаталог) Экспорт

	ПолныйПуть = ОбъединитьПути(КаталогИсходников(), Каталог, ВложенныйКаталог);
	Ожидаем.Что( мФС.КаталогСуществует(ПолныйПуть), "Полный путь: <" + ПолныйПуть + ">").ЭтоИстина();

КонецПроцедуры

Функция ПроверитьКаталогПустой(пИмяКаталога)
	Ожидаем.Что(мФС.КаталогПустой(пИмяКаталога), "Каталог <" + пИмяКаталога + "> не пустой").ЭтоИстина();
КонецФункции // КаталогПустой()

Функция КаталогБинарников()
	Возврат БДД.ПолучитьИзКонтекста("bin");
КонецФункции

Функция КаталогИсходников()
	Возврат БДД.ПолучитьИзКонтекста("src");
КонецФункции

Функция КаталогРесурсов()
	Возврат БДД.ПолучитьИзКонтекста("res");
КонецФункции

Функция ВыполнитьКоманду(Знач СтрокаКоманды, ТекстВывода = "")
	
	Команда = Новый Команда;
	
	Команда.УстановитьСтрокуЗапуска(СтрокаКоманды);

	КодВозврата = Команда.Исполнить();
	ТекстВывода = Команда.ПолучитьВывод();

	Если КодВозврата <> 0 Тогда
		мЛог.Информация(ТекстВывода);
	КонецЕсли;

	Возврат КодВозврата;

КонецФункции

мЛог = Логирование.ПолучитьЛог("oscript.app.v7src");
//ФайлЖурнала = Новый ВыводЛогаВФайл;
//ФайлЖурнала.ОткрытьФайл("e:\prog\oscript\v7src\oscript.app.ФичаРаспаковкаКаталога");
//мЛог.ДобавитьСпособВывода(ФайлЖурнала);
