
#Использовать asserts
#Использовать logos
#Использовать fs
#Использовать 1commands
#Использовать recoder

Перем Лог;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
	
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Распаковка файлов из каталога");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-bin", "Каталог, в котором будет выполнен поиск файлов для распаковки");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-src", "Каталог, в котором будут сохранены распакованные файлы");
    Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие ключей командной строки и их значений
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт
    
	Перем КаталогБинарников, КаталогИсходников;

	Если НЕ ЭтоКорректныеПараметры(ПараметрыКоманды) Тогда
		Возврат 1;
	КонецЕсли;

	КаталогБинарников = ПараметрыКоманды["-bin"];
	КаталогИсходников = ПараметрыКоманды["-src"];

   	Лог.Информация("Выполняется распаковка файлов из каталога <" + КаталогБинарников + "> в каталог <" + КаталогИсходников + ">");

	ФС.ОбеспечитьПустойКаталог(КаталогИсходников);

	Конвертер = ПолучитьКонвертерИмениФайла(КаталогБинарников, КаталогИсходников);

    МассивБинарныхФайлов = НайтиФайлыДляРаспаковки(КаталогБинарников);

	КолОбработано = 0;
	КолВсего = МассивБинарныхФайлов.Количество();

    Для Каждого БинарныйФайл Из МассивБинарныхФайлов Цикл
        
		ПроцентВыполненияСтрокой = СформироватьПредставлениеПроцентаВыполнения(КолОбработано, КолВсего);
		Лог.Информация(ПроцентВыполненияСтрокой + " Выполняется распаковка файла <" + БинарныйФайл.ПолноеИмя + ">");
        
		КаталогИсходниковТекФайла = Конвертер.ПутьКИсходникам(БинарныйФайл.ПолноеИмя);
		
		Попытка
			РаспаковатьФайлВКаталог(БинарныйФайл.ПолноеИмя, КаталогИсходниковТекФайла);
		Исключение
			ВызватьИсключение "Не удалось распаковать файл <" + БинарныйФайл.ПолноеИмя + ">. Описание ошибки:
			|" + ОписаниеОшибки();
		КонецПопытки;

		Перекодировщик.ПерекодироватьКаталог(КаталогИсходниковТекФайла);

		КолОбработано = КолОбработано + 1;

    КонецЦикла;

	Лог.Информация("Распаковка завершена успешно");

	Возврат 0;

КонецФункции

Функция СформироватьПредставлениеПроцентаВыполнения(Знач КолОбработано, Знач КолВсего)
	
	Если КолВсего = 0 Тогда
		ПроцентВыполнения = 0;
	Иначе
		ПроцентВыполнения = Окр(100 * КолОбработано / КолВсего);
	КонецЕсли;
	
	Возврат "(" + Прав("   " + ПроцентВыполнения, 3) + " %)";

КонецФункции // ПредставлениеПроцентаВыполнения()

Процедура РаспаковатьФайлВКаталог(ИмяФайла, ИмяКаталога)
	
	ФС.ОбеспечитьПустойКаталог(ИмяКаталога);

	КомандаЗапускаРаспаковки = "gcomp -d --external-report --no-profiles --no-empty-mxl --no-parse-dialogs -F """ + ИмяФайла + """ -DD """ + ИмяКаталога + """";
	Лог.Отладка(КомандаЗапускаРаспаковки);

	ВыполнитьКомандуСистемы(КомандаЗапускаРаспаковки);
	
КонецПроцедуры

Процедура ВыполнитьКомандуСистемы(Знач СтрокаКоманды)
	
	Команда = Новый Команда;
	
	Команда.УстановитьСтрокуЗапуска(СтрокаКоманды);

	КодВозврата = Команда.Исполнить();
	ТекстВывода = Команда.ПолучитьВывод();
	
	Если КодВозврата <> 0 Тогда
		ВызватьИсключение "Ошибка при выполнении команды системы.
		|    Команда: <" + СтрокаКоманды + ">
		|    Вывод команды: <" + ТекстВывода + ">";
	КонецЕсли;

КонецПроцедуры

Функция НайтиФайлыДляРаспаковки(пКаталог)

    Возврат НайтиФайлы(пКаталог, "*.ert", Истина);

КонецФункции

Функция ПолучитьКонвертерИмениФайла(пКаталогБинарников, пКаталогИсходников)
	Конвертер = Новый КонвертерИмяФайла;
	Конвертер.УстановитьКаталогБинарников(пКаталогБинарников);
	Конвертер.УстановитьКаталогИсходников(пКаталогИсходников);
	Возврат Конвертер;
КонецФункции // ПолучитьКонвертер()

Функция ЭтоКорректныеПараметры(Знач ПараметрыКоманды)

	КаталогБинарников = ПараметрыКоманды["-bin"];
	КаталогИсходников = ПараметрыКоманды["-src"];

	// обязательные параметры
	Если Не ВсеОбязательныеПараметрыУказаны(ПараметрыКоманды) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ФС.КаталогСуществует(КаталогБинарников) Тогда
		Лог.Ошибка("Каталог бинарников не существует <" + КаталогБинарников + ">");
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

Функция ВсеОбязательныеПараметрыУказаны(Знач ПараметрыКоманды)

	ОбязательныеПараметры = ПолучитьМассивОбязательныхПараметров();

	ВсеУказаны = Истина;
	Для каждого ИмяПараметра Из ОбязательныеПараметры Цикл
		Если ПустаяСтрока(ПараметрыКоманды[ИмяПараметра]) Тогда
			Лог.Ошибка("Не указано значение обязательного параметра " + ИмяПараметра);
			ВсеУказаны = Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат ВсеУказаны;

КонецФункции

Функция ПолучитьМассивОбязательныхПараметров()
	
	Параметры = Новый Массив;
	Параметры.Добавить("-bin");
	Параметры.Добавить("-src");

	Возврат Параметры;

КонецФункции // ПолучитьМассивОбязательныхПараметров()

Лог = Логирование.ПолучитьЛог(ПараметрыСистемы.ИмяЛогаСистемы());

//Лог.УстановитьУровень(УровниЛога.Отладка);
