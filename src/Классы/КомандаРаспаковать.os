
#Использовать asserts
#Использовать logos
#Использовать fs
#Использовать 1commands
#Использовать recoder
#Использовать progbar

Перем Лог;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
	
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Распаковка файлов из каталога");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-bin", "Каталог, в котором будет выполнен поиск файлов для распаковки");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-src", "Каталог, в котором будут сохранены распакованные файлы");
    Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие ключей командной строки и их значений
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт
    
	Перем КаталогБинарников, КаталогИсходников;

	Если НЕ ЭтоКорректныеПараметры(ПараметрыКоманды) Тогда
		Возврат 1;
	КонецЕсли;

	КаталогБинарников = ПараметрыКоманды["-bin"];
	КаталогИсходников = ПараметрыКоманды["-src"];

   	Лог.Информация("Выполняется распаковка файлов из каталога <" + КаталогБинарников + "> в каталог <" + КаталогИсходников + ">");

	ФС.ОбеспечитьПустойКаталог(КаталогИсходников);

	Конвертер = ПолучитьКонвертерИмениФайла(КаталогБинарников, КаталогИсходников);

    МассивБинарныхФайлов = НайтиФайлыДляРаспаковки(КаталогБинарников);

	КолОбработано = 0;
	КолВсего = МассивБинарныхФайлов.Количество();

	ПрогрессБар = Новый ПрогрессБар();
	ПрогрессБар.Начать(КолВсего, "Прогресс распаковки");

    Для Каждого БинарныйФайл Из МассивБинарныхФайлов Цикл
        
		Подсказка = БинарныйФайл.ПолноеИмя;

		ПрогрессБар.СделатьШаг(,, СокрЛП(БинарныйФайл.ПолноеИмя) + " ");
        
		КаталогИсходниковТекФайла = Конвертер.ПутьКИсходникам(БинарныйФайл.ПолноеИмя);
		
		Попытка
			РаспаковатьФайлВКаталог(БинарныйФайл, КаталогИсходниковТекФайла);
		Исключение
			ВызватьИсключение "Не удалось распаковать файл <" + БинарныйФайл.ПолноеИмя + ">. Описание ошибки:
			|" + ОписаниеОшибки();
		КонецПопытки;

		Перекодировщик.ПерекодироватьКаталог(КаталогИсходниковТекФайла);

		КолОбработано = КолОбработано + 1;
		
    КонецЦикла;

	ПрогрессБар.Завершить();

	Лог.Информация(СтрШаблон("Распаковка завершена успешно. Время выполнения: %1", ПрогрессБар.ДлительностьВыполнения(ИСТИНА)));

	Возврат 0;

КонецФункции

Процедура РаспаковатьФайлВКаталог(Файл, ИмяКаталога)
	
	ФС.ОбеспечитьПустойКаталог(ИмяКаталога);

	КомандаЗапускаРаспаковки = ПолучитьКомандуРаспаковки(Файл, ИмяКаталога);
	 
	Лог.Отладка(КомандаЗапускаРаспаковки);

	ВыполнитьКомандуСистемы(КомандаЗапускаРаспаковки);
	
КонецПроцедуры

Функция ПолучитьКомандуРаспаковки(Файл, ИмяКаталога)
	
	Команда = "gcomp -d --no-profiles --no-empty-mxl --no-parse-dialogs --sort-rights --sort-form-controls --no-broken-links";
	Команда = Команда +	" -F """ + Файл.ПолноеИмя + """ -DD """ + ИмяКаталога + """";

	РасширениеФайла = НРег(Файл.Расширение);

	Если РасширениеФайла = ".ert" Тогда
		Команда = Команда + " --external-report";

	ИначеЕсли РасширениеФайла = ".md" Тогда
		Команда = Команда + " --meta-data";

	Иначе		
		ВызватьИсключение "Файлы с расширением <" + РасширениеФайла + "> не обрабатываются";

	КонецЕсли;

	Возврат Команда;

КонецФункции // ПолучитьКомандуРаспаковки()

Процедура ВыполнитьКомандуСистемы(Знач СтрокаКоманды)
	
	Команда = Новый Команда;
	
	Команда.УстановитьСтрокуЗапуска(СтрокаКоманды);

	КодВозврата = Команда.Исполнить();
	ТекстВывода = Команда.ПолучитьВывод();
	
	Если КодВозврата <> 0 Тогда
		ВызватьИсключение "Ошибка при выполнении команды системы.
		|    Команда: <" + СтрокаКоманды + ">
		|    Вывод команды: <" + ТекстВывода + ">";
	КонецЕсли;

КонецПроцедуры

Функция НайтиФайлыДляРаспаковки(пКаталог)

	МассивРасширений = ОбрабатываемыеФайлы.ПолучитьМассивРасширений();
	МассивФайлов = Новый Массив;

	Для каждого РасширениеФайла Из МассивРасширений Цикл
		
		МаскаПоиска = "*." + РасширениеФайла;

		НайденныеФайлы = НайтиФайлы(пКаталог, МаскаПоиска, Истина);
		Для каждого НайденныйФайл Из НайденныеФайлы Цикл
			МассивФайлов.Добавить(НайденныйФайл);
		КонецЦикла;

	КонецЦикла;

    Возврат МассивФайлов;

КонецФункции

Функция ПолучитьКонвертерИмениФайла(пКаталогБинарников, пКаталогИсходников)
	Конвертер = Новый КонвертерИмяФайла;
	Конвертер.УстановитьКаталогБинарников(пКаталогБинарников);
	Конвертер.УстановитьКаталогИсходников(пКаталогИсходников);
	Возврат Конвертер;
КонецФункции // ПолучитьКонвертер()

Функция ЭтоКорректныеПараметры(Знач ПараметрыКоманды)

	КаталогБинарников = ПараметрыКоманды["-bin"];
	КаталогИсходников = ПараметрыКоманды["-src"];

	// обязательные параметры
	Если Не ВсеОбязательныеПараметрыУказаны(ПараметрыКоманды) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ФС.КаталогСуществует(КаталогБинарников) Тогда
		Лог.Ошибка("Каталог бинарников не существует <" + КаталогБинарников + ">");
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

Функция ВсеОбязательныеПараметрыУказаны(Знач ПараметрыКоманды)

	ОбязательныеПараметры = ПолучитьМассивОбязательныхПараметров();

	ВсеУказаны = Истина;
	Для каждого ИмяПараметра Из ОбязательныеПараметры Цикл
		Если ПустаяСтрока(ПараметрыКоманды[ИмяПараметра]) Тогда
			Лог.Ошибка("Не указано значение обязательного параметра " + ИмяПараметра);
			ВсеУказаны = Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат ВсеУказаны;

КонецФункции

Функция ПолучитьМассивОбязательныхПараметров()
	
	Параметры = Новый Массив;
	Параметры.Добавить("-bin");
	Параметры.Добавить("-src");

	Возврат Параметры;

КонецФункции // ПолучитьМассивОбязательныхПараметров()

Лог = Логирование.ПолучитьЛог(ПараметрыСистемы.ИмяЛогаСистемы());

//Лог.УстановитьУровень(УровниЛога.Отладка);
//
//ФайлЖурнала = Новый ВыводЛогаВФайл;
//ФайлЖурнала.ОткрытьФайл("oscript.app.v7src");
//Лог.ДобавитьСпособВывода(ФайлЖурнала);
//Лог.Закрыть(); // при включении логирования в файл рекомендуется закрывать лог.

